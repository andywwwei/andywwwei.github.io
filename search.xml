<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringCache</title>
      <link href="/2025/05/30/SpringCache/"/>
      <url>/2025/05/30/SpringCache/</url>
      
        <content type="html"><![CDATA[<p><strong>Spring 缓存（Spring Cache）是 Spring 提供的一套基于注解的缓存抽象机制，常用于提升系统性能、减少重复查询数据库或接口调用。</strong></p><h2 id="✅-一、基本原理"><a href="#✅-一、基本原理" class="headerlink" title="✅ 一、基本原理"></a>✅ 一、基本原理</h2><p><strong>Spring Cache 通过对方法的返回结果进行缓存，后续相同参数的调用将直接从缓存中读取，而不是再次执行方法。</strong></p><h3 id="常用的注解："><a href="#常用的注解：" class="headerlink" title="常用的注解："></a>常用的注解：</h3><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td><code>@EnableCaching</code></td><td>开启缓存功能</td></tr><tr><td><code>@Cacheable</code></td><td>有缓存则用缓存，无缓存则调用方法并缓存结果</td></tr><tr><td><code>@CachePut</code></td><td>每次执行方法，并将返回结果放入缓存（更新缓存）</td></tr><tr><td><code>@CacheEvict</code></td><td>清除缓存</td></tr><tr><td><code>@Caching</code></td><td>组合多个缓存操作注解</td></tr></tbody></table><h2 id="✅-二、使用示例"><a href="#✅-二、使用示例" class="headerlink" title="✅ 二、使用示例"></a>✅ 二、使用示例</h2><h2 id="1-添加依赖（使用-Caffeine-举例）"><a href="#1-添加依赖（使用-Caffeine-举例）" class="headerlink" title="1. 添加依赖（使用 Caffeine 举例）"></a>1. 添加依赖（使用 Caffeine 举例）</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.ben-manes.caffeine<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>caffeine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br></pre></td></tr></table></figure><h3 id="2-启用缓存"><a href="#2-启用缓存" class="headerlink" title="2. 启用缓存"></a>2. 启用缓存</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableCaching</span>  <span class="comment">// 启用缓存功能注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(App.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-使用缓存注解"><a href="#3-使用缓存注解" class="headerlink" title="3. 使用缓存注解"></a>3. 使用缓存注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一次调用查询数据库，结果会被缓存</span></span><br><span class="line">    <span class="meta">@Cacheable(cacheNames = &quot;user&quot;, key = &quot;#id&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUserById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询数据库中的用户信息&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> userMapper.selectById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新用户后，缓存也要更新</span></span><br><span class="line">    <span class="meta">@CachePut(cacheNames = &quot;user&quot;, key = &quot;#user.id&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">updateUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        userMapper.updateById(user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除用户时，清除缓存</span></span><br><span class="line">    <span class="meta">@CacheEvict(cacheNames = &quot;user&quot;, key = &quot;#id&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        userMapper.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-配置缓存（application-yml）"><a href="#4-配置缓存（application-yml）" class="headerlink" title="4. 配置缓存（application.yml）"></a>4. 配置缓存（application.yml）</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">cache-names:</span> <span class="string">user</span>  <span class="comment"># 作用：定义一个或多个缓存名称（缓存空间），在注解如 @Cacheable(cacheNames=&quot;user&quot;) 中引用。 示例含义：你这里定义了一个缓存名称叫 user，用于用户相关数据缓存。</span></span><br><span class="line">    <span class="attr">caffeine:</span></span><br><span class="line">      <span class="comment"># 作用：配置 Caffeine 缓存的参数，使用一种类似 Java 配置的 DSL 风格字符串，和 Caffeine.newBuilder().xxx() 一一对应。</span></span><br><span class="line">      <span class="comment"># maximumSize=1000 设置缓存最大条目数为 1000，超过后触发淘汰（基于 W-TinyLFU）</span></span><br><span class="line">      <span class="comment"># expireAfterWrite=60s 写入后 60 秒过期（不管有没有被访问）</span></span><br><span class="line">      <span class="attr">spec:</span> <span class="string">maximumSize=1000,expireAfterWrite=60s</span>  </span><br></pre></td></tr></table></figure><h2 id="✅-三、缓存存储方案"><a href="#✅-三、缓存存储方案" class="headerlink" title="✅ 三、缓存存储方案"></a>✅ 三、缓存存储方案</h2><p>Spring Cache 是抽象接口，底层可接入多种缓存方案：</p><table><thead><tr><th>方案</th><th>特点</th></tr></thead><tbody><tr><td>Caffeine</td><td>本地缓存，性能极高，适合单体应用</td></tr><tr><td>EhCache</td><td>本地缓存，功能丰富但不如 Caffeine 快</td></tr><tr><td>Redis</td><td>分布式缓存，适合集群部署、高并发环境</td></tr><tr><td>Guava</td><td>轻量但已不推荐，Caffeine 是它的替代者</td></tr></tbody></table><h2 id="✅-四、进阶功能"><a href="#✅-四、进阶功能" class="headerlink" title="✅ 四、进阶功能"></a>✅ 四、进阶功能</h2><ul><li><p><strong>条件缓存</strong>：@Cacheable(condition &#x3D; “#id &gt; 100”)</p></li><li><p><strong>缓存为空不存</strong>：unless &#x3D; “#result &#x3D;&#x3D; null”</p></li><li><p><strong>组合注解</strong>：@Caching(cacheable &#x3D; {…}, evict &#x3D; {…})</p></li><li><p><strong>手动缓存</strong>：使用 CacheManager 操作缓存对象</p></li></ul><h2 id="✅-五、总结"><a href="#✅-五、总结" class="headerlink" title="✅ 五、总结"></a>✅ 五、总结</h2><table><thead><tr><th>功能场景</th><th>建议使用</th></tr></thead><tbody><tr><td>本地缓存</td><td>Caffeine</td></tr><tr><td>分布式缓存</td><td>Redis</td></tr><tr><td>单体轻量项目</td><td>Spring Cache + Caffeine</td></tr><tr><td>高并发分布式系统</td><td>Redis + 自定义注解</td></tr></tbody></table><h2 id="✅-六、实战"><a href="#✅-六、实战" class="headerlink" title="✅ 六、实战"></a>✅ 六、实战</h2><p>一个完整的 Spring Boot 项目示例，集成 Spring Cache + Caffeine，模拟一个 用户信息查询缓存的业务场景。</p><p>🧱 项目结构（简化单模块）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">spring-cache-demo/</span><br><span class="line">├── <span class="attribute">src</span>/</span><br><span class="line">│   ├── <span class="selector-tag">main</span>/</span><br><span class="line">│   │   ├── java/</span><br><span class="line">│   │   │   └── com/example/cache/</span><br><span class="line">│   │   │       ├── CacheApplication<span class="selector-class">.java</span></span><br><span class="line">│   │   │       ├── controller/</span><br><span class="line">│   │   │       │   └── UserController<span class="selector-class">.java</span></span><br><span class="line">│   │   │       ├── service/</span><br><span class="line">│   │   │       │   └── UserService<span class="selector-class">.java</span></span><br><span class="line">│   │   │       └── model/</span><br><span class="line">│   │   │           └── User<span class="selector-class">.java</span></span><br><span class="line">│   └── resources/</span><br><span class="line">│       └── application<span class="selector-class">.yml</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1️⃣ 引入依赖（pom.xml）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cache-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.ben-manes.caffeine<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>caffeine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2️⃣ 启动类 CacheApplication.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableCaching</span> <span class="comment">// 开启缓存注解支持</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(CacheApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3️⃣ 用户模型 User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.cache.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(Long id, String name, String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter、setter省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4️⃣ 服务类 UserService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.cache.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.cache.model.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.Cacheable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CachePut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CacheEvict;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟从数据库获取数据</span></span><br><span class="line">    <span class="meta">@Cacheable(cacheNames = &quot;user&quot;, key = &quot;#id&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUserById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;❗查询数据库获取用户信息&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(id, <span class="string">&quot;User&quot;</span> + id, <span class="string">&quot;user&quot;</span> + id + <span class="string">&quot;@example.com&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新用户信息并更新缓存</span></span><br><span class="line">    <span class="meta">@CachePut(cacheNames = &quot;user&quot;, key = &quot;#user.id&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">updateUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;🔄更新用户并刷新缓存&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除用户缓存</span></span><br><span class="line">    <span class="meta">@CacheEvict(cacheNames = &quot;user&quot;, key = &quot;#id&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;❌删除缓存&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5️⃣ 控制器 UserController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.cache.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.cache.model.User;</span><br><span class="line"><span class="keyword">import</span> com.example.cache.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserService userService;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserController</span><span class="params">(UserService userService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getUserById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">updateUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.updateUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">deleteUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        userService.deleteUser(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;deleted&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>6️⃣ 配置文件 application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">caffeine</span></span><br><span class="line">    <span class="attr">cache-names:</span> <span class="string">user</span></span><br><span class="line">    <span class="attr">caffeine:</span></span><br><span class="line">      <span class="attr">spec:</span> <span class="string">maximumSize=1000,expireAfterWrite=60s</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>✅ 测试流程</p><p>1.第一次请求：GET &#x2F;users&#x2F;1</p><pre><code>→ 控制台输出“查询数据库获取用户信息”</code></pre><p>2.第二次请求：GET &#x2F;users&#x2F;1</p><pre><code>→ 不再输出，直接使用缓存结果</code></pre><p>3.更新用户：PUT &#x2F;users，提交 JSON：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;新名字&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;new@example.com&quot;</span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>4.删除缓存：DELETE &#x2F;users&#x2F;1</p><pre><code> → 控制台输出“删除缓存”</code></pre><h2 id="✅-七、Cache注解详解"><a href="#✅-七、Cache注解详解" class="headerlink" title="✅ 七、Cache注解详解"></a>✅ 七、Cache注解详解</h2><p>✅ @Cacheable 参数详解（用于读取缓存）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable(</span></span><br><span class="line"><span class="meta">    value = &quot;user&quot;,        // 指定缓存的名称（可以是多个），即 cacheNames 的别名</span></span><br><span class="line"><span class="meta">    key = &quot;#id&quot;,           // SpEL 表达式定义缓存 key</span></span><br><span class="line"><span class="meta">    condition = &quot;#id &gt; 0&quot;, // 满足条件时才缓存</span></span><br><span class="line"><span class="meta">    unless = &quot;#result == null&quot;, // 返回值不为 null 才缓存</span></span><br><span class="line"><span class="meta">    sync = false           // 是否同步加载（避免缓存击穿）</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getUserById</span><span class="params">(Long id)</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>value</code> &#x2F; <code>cacheNames</code></td><td>缓存名称，对应 <code>@EnableCaching</code> 配置的缓存管理器（CacheManager）中定义的缓存空间</td></tr><tr><td><code>key</code></td><td>缓存 key，使用 Spring Expression Language（SpEL）表达式（如：<code>#id</code>, <code>#user.name</code>）</td></tr><tr><td><code>keyGenerator</code></td><td>指定 key 生成器（和 key 二选一）</td></tr><tr><td><code>condition</code></td><td>缓存条件：满足时才执行缓存，如 <code>#id != null</code></td></tr><tr><td><code>unless</code></td><td>排除条件：结果满足时不缓存，如 <code>#result == null</code></td></tr><tr><td><code>sync</code></td><td>是否启用同步缓存（防止缓存击穿，多线程同时查同一 key）【仅限某些缓存实现支持，如 Caffeine 支持】</td></tr></tbody></table><p>✅ @CachePut 参数详解（用于更新缓存）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CachePut(</span></span><br><span class="line"><span class="meta">    value = &quot;user&quot;,</span></span><br><span class="line"><span class="meta">    key = &quot;#user.id&quot;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">updateUser</span><span class="params">(User user)</span> &#123; ... &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>与 @Cacheable 基本相同，但始终执行方法体并更新缓存</p><p>适用于“更新数据库并同步更新缓存”的场景</p><p>✅ @CacheEvict 参数详解（用于删除缓存）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CacheEvict(</span></span><br><span class="line"><span class="meta">    value = &quot;user&quot;,</span></span><br><span class="line"><span class="meta">    key = &quot;#id&quot;,</span></span><br><span class="line"><span class="meta">    condition = &quot;#id != null&quot;,</span></span><br><span class="line"><span class="meta">    beforeInvocation = false</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">(Long id)</span> &#123; ... &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>value</code></td><td>缓存名</td></tr><tr><td><code>key</code></td><td>指定要删除的 key</td></tr><tr><td><code>allEntries</code></td><td>是否清除所有缓存项，如：<code>true</code> 表示清空整个 cache</td></tr><tr><td><code>beforeInvocation</code></td><td>是否在方法执行前清除缓存，默认是 false（即执行后才清除）</td></tr><tr><td>常见组合用法：</td><td></td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CacheEvict(value = &quot;user&quot;, allEntries = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clearCache</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>🔄 多个注解组合：@Caching<br>如果你想组合多个缓存注解（如读一个，清除另一个），可以使用 @Caching：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Caching(</span></span><br><span class="line"><span class="meta">    cacheable = &#123;</span></span><br><span class="line"><span class="meta">        @Cacheable(value = &quot;user&quot;, key = &quot;#id&quot;)</span></span><br><span class="line"><span class="meta">    &#125;,</span></span><br><span class="line"><span class="meta">    evict = &#123;</span></span><br><span class="line"><span class="meta">        @CacheEvict(value = &quot;userList&quot;, allEntries = true)</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getUserById</span><span class="params">(Long id)</span> &#123; ... &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>📌 SpEL 表达式说明</p><table><thead><tr><th>表达式</th><th>说明</th></tr></thead><tbody><tr><td><code>#p0</code> &#x2F; <code>#a0</code></td><td>第一个参数</td></tr><tr><td><code>#id</code></td><td>名称为 id 的参数</td></tr><tr><td><code>#user.name</code></td><td>参数 user 的 name 属性</td></tr><tr><td><code>#result</code></td><td>方法返回值（only <code>unless</code>）</td></tr></tbody></table><p>✅ 示例回顾</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable(value = &quot;user&quot;, key = &quot;#id&quot;, unless = &quot;#result == null&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(Long id)</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@CachePut(value = &quot;user&quot;, key = &quot;#user.id&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">updateUser</span><span class="params">(User user)</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;user&quot;, key = &quot;#id&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">(Long id)</span> &#123; ... &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="✅-八、使用细节详解"><a href="#✅-八、使用细节详解" class="headerlink" title="✅ 八、使用细节详解"></a>✅ 八、使用细节详解</h2><p>⚙️ 1. Cache 配置类</p><p>springboot 可以有properties配置方式，改成bean方式配置</p><p>✅  使用 Java Config 自定义 Caffeine Cache</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.github.benmanes.caffeine.cache.Caffeine;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.Cache;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.CacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.caffeine.CaffeineCache;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.concurrent.ConcurrentMapCacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建 Caffeine 缓存管理器</span></span><br><span class="line"><span class="comment">     * 自定义一个 Spring 的缓存管理器 CacheManager，</span></span><br><span class="line"><span class="comment">     * 当缓存名称为 &quot;user&quot; 时，使用手动创建的 CaffeineCache 实例；</span></span><br><span class="line"><span class="comment">     * 否则使用默认的内存 Map 缓存。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CacheManager <span class="title function_">cacheManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CaffeineCache</span> <span class="variable">userCache</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CaffeineCache</span>(<span class="string">&quot;user&quot;</span>,  <span class="comment">// 创建了一个名为 user 的缓存实例，使用了 Caffeine 提供的构建器</span></span><br><span class="line">                Caffeine.newBuilder()</span><br><span class="line">                        .initialCapacity(<span class="number">100</span>) <span class="comment">// 缓存容器的初始大小，优化扩容性能</span></span><br><span class="line">                        .maximumSize(<span class="number">1000</span>)  <span class="comment">// 最多缓存 1000 条记录，超出会使用 Caffeine 的 W-TinyLFU 淘汰算法移除最不常用的条目。</span></span><br><span class="line">                        .expireAfterWrite(<span class="number">60</span>, TimeUnit.SECONDS) <span class="comment">// 写入后 60 秒自动过期（不管是否访问）。</span></span><br><span class="line">                        .recordStats()  <span class="comment">// 启用统计功能（命中率、缓存数量等，调试和监控可用）。</span></span><br><span class="line">                        .build());  <span class="comment">// 最终构建出一个 Cache&lt;Object, Object&gt;。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//  Caffeine 缓存被包装成 Spring 的 CaffeineCache 实例（Spring 使用自己的缓存接口 org.springframework.cache.Cache 进行统一抽象）。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ConcurrentMapCacheManager</span>() &#123; <span class="comment">// 创建了一个匿名内部类 ConcurrentMapCacheManager（Spring 默认的基于内存的缓存管理器），并重写了其 createConcurrentMapCache 方法：</span></span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> Cache <span class="title function_">createConcurrentMapCache</span><span class="params">(<span class="keyword">final</span> String name)</span> &#123;</span><br><span class="line">                <span class="comment">// 每当系统使用 @Cacheable(cacheNames = &quot;user&quot;) 时 会触发 createConcurrentMapCache(&quot;user&quot;) 判断名称是否是 &quot;user&quot;，是就返回我们手动构建的 CaffeineCache。</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;user&quot;</span>.equals(name)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> userCache;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 如果是其他缓存名，则走父类默认实现（使用 ConcurrentHashMap 的简单内存缓存，不带过期等特性）。</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">super</span>.createConcurrentMapCache(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>✅ 总结：使用 Bean 的优点</p><table><thead><tr><th>优点</th><th>说明</th></tr></thead><tbody><tr><td>✅ 更灵活</td><td>可用 Java 代码动态定义缓存逻辑</td></tr><tr><td>✅ 无需写配置文件</td><td>统一管理更清晰</td></tr><tr><td>✅ 支持多个缓存策略</td><td>每个缓存可用不同的配置</td></tr></tbody></table><p>🧠 提示：如何支持多个不同策略的 Caffeine 缓存？</p><p>要实现 Spring Cache + Caffeine 中不同缓存名使用不同策略的配置方式，咱们可以改写配置，使其更通用且可扩展 —— 比如：</p><p>✅ 多缓存名，不同策略的 Caffeine 缓存管理器</p><p>👇 示例：每个缓存名对应一个不同的策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CacheManager <span class="title function_">cacheManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 构建不同的缓存实例</span></span><br><span class="line">        Map&lt;String, CaffeineCache&gt; cacheMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// user 缓存：60秒后过期，最大1000条</span></span><br><span class="line">        cacheMap.put(<span class="string">&quot;user&quot;</span>, <span class="keyword">new</span> <span class="title class_">CaffeineCache</span>(<span class="string">&quot;user&quot;</span>,</span><br><span class="line">                Caffeine.newBuilder()</span><br><span class="line">                        .maximumSize(<span class="number">1000</span>)</span><br><span class="line">                        .expireAfterWrite(<span class="number">60</span>, TimeUnit.SECONDS)</span><br><span class="line">                        .build()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// product 缓存：5分钟过期，最大500条</span></span><br><span class="line">        cacheMap.put(<span class="string">&quot;product&quot;</span>, <span class="keyword">new</span> <span class="title class_">CaffeineCache</span>(<span class="string">&quot;product&quot;</span>,</span><br><span class="line">                Caffeine.newBuilder()</span><br><span class="line">                        .maximumSize(<span class="number">500</span>)</span><br><span class="line">                        .expireAfterWrite(<span class="number">5</span>, TimeUnit.MINUTES)</span><br><span class="line">                        .build()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// order 缓存：10分钟后失效，最大200条</span></span><br><span class="line">        cacheMap.put(<span class="string">&quot;order&quot;</span>, <span class="keyword">new</span> <span class="title class_">CaffeineCache</span>(<span class="string">&quot;order&quot;</span>,</span><br><span class="line">                Caffeine.newBuilder()</span><br><span class="line">                        .maximumSize(<span class="number">200</span>)</span><br><span class="line">                        .expireAfterWrite(<span class="number">10</span>, TimeUnit.MINUTES)</span><br><span class="line">                        .build()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个自定义 CacheManager，支持上面这些策略</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleCacheManager</span>() &#123;&#123;</span><br><span class="line">            setCaches(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(cacheMap.values()));</span><br><span class="line">        &#125;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>✅ 总结对比</p><table><thead><tr><th>配置方式</th><th>特点</th></tr></thead><tbody><tr><td><code>application.yml</code> 配置</td><td>简单、适合统一策略</td></tr><tr><td>自定义 <code>CacheManager</code> Bean</td><td>更灵活、支持不同缓存名自定义策略，适合中大型项目需求</td></tr></tbody></table><p>✅ recordStats 查看</p><p>一、如何启用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Caffeine.newBuilder()</span><br><span class="line">    .maximumSize(<span class="number">1000</span>)</span><br><span class="line">    .expireAfterWrite(<span class="number">60</span>, TimeUnit.SECONDS)</span><br><span class="line">    .recordStats() <span class="comment">// ✅ 开启统计</span></span><br><span class="line">    .build();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>二、如何获取统计数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> CacheManager cacheManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printUserCacheStats</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">CaffeineCache</span> <span class="variable">caffeineCache</span> <span class="operator">=</span> (CaffeineCache) cacheManager.getCache(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    com.github.benmanes.caffeine.cache.Cache&lt;?, ?&gt; nativeCache = caffeineCache.getNativeCache();</span><br><span class="line"></span><br><span class="line">    <span class="type">CacheStats</span> <span class="variable">stats</span> <span class="operator">=</span> nativeCache.stats();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;命中次数：&quot;</span> + stats.hitCount());</span><br><span class="line">    System.out.println(<span class="string">&quot;未命中次数：&quot;</span> + stats.missCount());</span><br><span class="line">    System.out.println(<span class="string">&quot;命中率：&quot;</span> + stats.hitRate());</span><br><span class="line">    System.out.println(<span class="string">&quot;加载成功次数：&quot;</span> + stats.loadSuccessCount());</span><br><span class="line">    System.out.println(<span class="string">&quot;加载失败次数：&quot;</span> + stats.loadFailureCount());</span><br><span class="line">    System.out.println(<span class="string">&quot;平均加载时间：&quot;</span> + stats.averageLoadPenalty() + <span class="string">&quot;ns&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;被驱逐次数：&quot;</span> + stats.evictionCount());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>三、如果你想实时查看：建议加个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/cache&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheStatsController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CacheManager cacheManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/stats/&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">getCacheStats</span><span class="params">(<span class="meta">@PathVariable</span> String name)</span> &#123;</span><br><span class="line">        <span class="type">CaffeineCache</span> <span class="variable">cache</span> <span class="operator">=</span> (CaffeineCache) cacheManager.getCache(name);</span><br><span class="line">        com.github.benmanes.caffeine.cache.Cache&lt;?, ?&gt; nativeCache = cache.getNativeCache();</span><br><span class="line">        <span class="type">CacheStats</span> <span class="variable">stats</span> <span class="operator">=</span> nativeCache.stats();</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        result.put(<span class="string">&quot;hitCount&quot;</span>, stats.hitCount());</span><br><span class="line">        result.put(<span class="string">&quot;missCount&quot;</span>, stats.missCount());</span><br><span class="line">        result.put(<span class="string">&quot;hitRate&quot;</span>, stats.hitRate());</span><br><span class="line">        result.put(<span class="string">&quot;evictionCount&quot;</span>, stats.evictionCount());</span><br><span class="line">        result.put(<span class="string">&quot;loadSuccessCount&quot;</span>, stats.loadSuccessCount());</span><br><span class="line">        result.put(<span class="string">&quot;loadFailureCount&quot;</span>, stats.loadFailureCount());</span><br><span class="line">        result.put(<span class="string">&quot;averageLoadPenalty(ns)&quot;</span>, stats.averageLoadPenalty());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Cache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/05/16/hello-world/"/>
      <url>/2025/05/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo</title>
      <link href="/2025/05/13/hello/"/>
      <url>/2025/05/13/hello/</url>
      
        <content type="html"><![CDATA[<h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h3><p>Welcome to [Hexo]</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 说说 </tag>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
